/*
Part 1: SingleThreaded and MultiThreaded MergeSort

For small arrays, both versions have similar runtimes, with the single threaded mergesort being more efficient. For very large arrays,
the MultiThreaded seems to be far faster and more efficient.

   Duration of singlethread vs multithread sorting for different sized arrays (speed up factors):

        Array Size:      SingleThread Duration:        MultiThread Duration:
        10                   00:00.03                        00:00.05
        100                  00:00.05                        00:00.07
        1000                 00:00.27                        00:00.57
        10,000               00:04.53                        00:04.65         
        100,000              00:06.56                        00:05.94       //MT becomes more efficient than ST here   
        1,000,000            00:47.73                        00:35.72
        10,000,000           06:06.53                        05:58.29
 
 
   Using Environment.ProcessorCount(); I discovered that my computer had 8 processor/cores.
   
   Part 2: SingleThreaded and Multithreaded Pi Estimation
   
   With a 1000 sized array and a singlethread, my pi estimation is quite close, with estimations including 3.11, 3.14, 3.164 and 3.20 (notable variation).
   To obtain an estimation consistently close to 3 decimal points, I needed approximately a 10^6 - 10^8 sized sample.

 */
